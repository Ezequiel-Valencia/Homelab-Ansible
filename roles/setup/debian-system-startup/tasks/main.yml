---

- name: Include Variables
  ansible.builtin.include_vars:
    dir: vars
    extensions:
      - "yml"


########################
## Dependency Install ##
########################

- name: Update packages
  become: true
  ansible.builtin.apt:
    update_cache: true
    upgrade: true

- name: Clean repo
  become: true
  ansible.builtin.apt:
    autoclean: true
    autoremove: true

- name: Install Setup Packages
  become: true
  ansible.builtin.apt:
    pkg: '{{ pkg }}'
    state: present
  loop: '{{ setup_packages }}'
  loop_control:
    loop_var: pkg

- name: Install QEMU Guest Agent
  become: true
  ansible.builtin.apt:
    pkg: qemu-guest-agent
    state: present
  when: is_qemu_guest

- name: Install PythonVenv
  become: true
  ansible.builtin.apt:
    name:
      - python3-virtualenv

- name: Create Venv
  ansible.builtin.pip:
    virtualenv: '/home/{{ ansible_user }}/pyvenv'
    name:
      - docker==6.1.2
      - docker-compose
      - pyyaml==5.3.1

- name: Switch to New Python interpreter
  ansible.builtin.set_fact:
    ansible_python_interpreter: '{{ ansible_env.HOME }}/pyvenv/bin/python3'
  when: not pythonvenv_status.stat.exists

- name: Geerlinguy Docker Install
  ansible.builtin.include_role:
    name: geerlingguy.docker
    apply:
      become: true


####################
## Base Sec       ##
####################
# Would use OSAP for security, but its automated ansible scripts maybe a pain to implement
- name: Geerling Security
  ansible.builtin.include_role:
    # https://github.com/geerlingguy/ansible-role-security
    name: geerlingguy.security
    apply:
      become: true


- name: Restart sshd for Debian
  become: true
  ansible.builtin.service:
    name: sshd
    state: restarted
  when: ansible_facts['distribution'] == "Debian"

## If Ubuntu its ssh not sshd
- name: Restart ssh for Ubuntu
  become: true
  ansible.builtin.service:
    name: ssh
    state: restarted
  when: ansible_facts['distribution'] == "Ubuntu"

- name: Ensure the configured SSH port is used for remainder of role
  ansible.builtin.set_fact:
    ansible_port: "{{ alt_ssh_port }}"


###################
## Misc          ##
###################


- name: Set hostname
  become: true
  ansible.builtin.hostname:
    name: "{{ inventory_hostname }}"
    use: debian


###################
# K8 Specific     #
###################

- name: Enable ISCSI Kernel Module
  become: true
  community.general.modprobe:
    name: iscsi_tcp
    state: present
  when: longhorn_node

# https://longhorn.io/kb/troubleshooting-volume-with-multipath/
- name: Check if Multipath Conf File Exists
  become: true
  ansible.builtin.stat:
    path: "/etc/multipath.conf"
  register: setup_multipath_conf_stat

- name: Copy Blacklist Conf Longhorn from Multipath
  become: true
  ansible.builtin.copy:
    mode: u=rw,g=r,o=r
    src: multipath.conf
    dest: /etc/multipath.conf
    force: false
  when: ansible_facts['distribution'] == "Ubuntu" and longhorn_node and not setup_multipath_conf_stat.stat.exists
  notify:
    - Restart Multipath Service

- name: Append to Multipath Conf Longhorn Blacklist
  become: true
  ansible.builtin.blockinfile:
    state: present
    dest: /etc/multipath.conf
    mode: u=rw,g=r,o=r
    prepend_newline: true
    backup: true
    block: "{{ lookup('file', '../files/multipath.conf') }}"
  when: ansible_facts['distribution'] == "Ubuntu" and longhorn_node and setup_multipath_conf_stat.stat.exists
  notify:
    - Restart Multipath Service
