---
# https://github.com/qdm12/gluetun/wiki
- name: Create Gluetun and services that will use its networking
  become_user: "{{ ansible_user }}"
  community.docker.docker_compose:
    project_name: "The good stuff :)"
    definition:
      services:
        gluetun:
          image: qmcgaw/gluetun
          restart: always
          cap_add:
            - NET_ADMIN
          environment:
            - VPN_SERVICE_PROVIDER="{{ vpn_service_provider }}"
            - VPN_TYPE=wireguard
            - WIREGUARD_PRIVATE_KEY="{{ wireguard_private_key }}"
            - WIREGUARD_ADDRESSES="{{ wireguard_address }}"
            - SERVER_CITIES=New York
            - DOT_PROVIDERS=quad9
            - UPDATER_PERIOD="48h"
          ports:
            - "7676:6767" # Bazarr
            - "9898:8989" # Sonar
            - "8787:7878" # Raddarr
            # Qbittorent
            - "8080:8080"
            - "7439:6881/tcp"
            - "7439:6881/udp"
          volumes:
            - "{{ defualt_relative_docker_data_path }}/gluetun:/gluetun"

        # Create Jackett, helps parse stuff of interest
        jackett:
          image: linuxserver/jackett
          restart: unless-stopped
          environment:
            - TZ="{{ time_zone }}"
          network_mode: "{{ unified_network }}"
          volumes:
            - "{{ defualt_relative_docker_data_path }}/jackett/config:/config"

        # Gets subtitles
        bazarr:
          image: linuxserver/bazarr
          restart: unless-stopped
          environment:
            - TZ="{{ time_zone }}"
          network_mode: "{{ unified_network }}"
          volumes:
            - "{{ defualt_relative_docker_data_path }}/bazarr/config:/config"
            - "{{ media_path_tv }}:/tv"
            - "{{ media_path_movies }}:/movies"

        # Request shows automatically, https://hub.docker.com/r/linuxserver/sonarr
        sonar:
          image: linuxserver/sonar
          restart: unless-stopped
          environment:
            - TZ="{{ time_zone }}"
          network_mode: "{{ unified_network }}"
          volumes:
            - "{{ defualt_relative_docker_data_path }}/sonar/config:/config"
            - "{{ media_path_tv }}:/tv"
            - "{{ media_path_downloads }}:/downloads"


        # Request movies automatically, https://hub.docker.com/r/linuxserver/radarr
        raddarr:
          image: linuxserver/radarr
          restart: unless-stopped
          environment:
            - TZ="{{ time_zone }}"
          network_mode: "{{ unified_network }}"
          volumes:
            - "{{ defualt_relative_docker_data_path }}/raddarr/config:/config"
            - "{{ media_path_movies }}:/movies"
            - "{{ media_path_downloads }}:/downloads"

        # Actually does the downloading, https://hub.docker.com/r/linuxserver/qbittorrent
        qbittorent:
          image: linuxserver/qbittorrent
          restart: unless-stopped
          environment:
            - TZ="{{ time_zone }}"
          network_mode: "{{ unified_network }}"
          volumes:
            - "{{ defualt_relative_docker_data_path }}/qbittorent/config:/config"
            - "{{ media_path_downloads }}:/downloads"


- name: Create jellyfin media
  community.docker.docker_compose:
    project_name: Jellyfin
    definition:
      services:
        jellyfin:
          image: linuxserver/jellyfin
          restart: unless-stopped
          environment:
            - TZ="{{ time_zone }}"
          ports:
            - "7260:8096"
          volumes:
            - "{{ defualt_relative_docker_data_path }}/jellyfin:/config"
            - "{{ media_path_tv }}:/data/tvshows"
            - "{{ media_path_movies }}:/data/movies"

# - name: Create Open books
#   community.docker.docker_container:
#     name: Open Books
