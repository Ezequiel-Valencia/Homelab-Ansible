---
- name: Create media group
  become: true
  ansible.builtin.group:
    name: media
    state: present
  register: group_return_values

- name: Create users for media group
  become: true
  ansible.builtin.user:
    name: "{{ current_user.name }}"
    uid: "{{ current_user.PUID }}"
    groups: "{{ group_return_values.name }}"
  loop: "{{ users }}"
  loop_control:
    loop_var: current_user


- name: Create the folders requied for media group
  become: true
  ansible.builtin.file:
    path: "{{ item.dir }}"
    state: directory
    mode: u=rwx,g=rwx,o=rx
    recurse: true
    owner: "{{ item.owner }}"
    group: "{{ group_return_values.gid }}"
  with_items:
    - dir: "{{ media_path_downloads }}"
      owner: "{{ users[1].PUID }}"

    - dir: "{{ media_path_tv }}"
      owner: "{{ users[0].PUID }}"

    - dir: "{{ media_path_movies }}"
      owner: "{{ users[0].PUID }}"

    - dir: "{{ media_path_music }}"
      owner: "{{ users[0].PUID }}"

    - dir: "{{ media_path_books }}"
      owner: "{{ users[0].PUID }}"

    - dir: "{{ jellyfin_config_path }}"
      owner: "{{ users[0].PUID }}"

# https://docs.docker.com/engine/reference/commandline/volume_create/#driver-specific-options
# https://docs.docker.com/storage/volumes/
# https://forums.docker.com/t/is-there-a-maximum-size-for-docker-volumes/20978
#  In case the volume present is to small, can create future volumes to increase its size, want to share it
#  Seems conflicted as to whether there is a storage limit though
# - name: Create docker volumes
#   community.docker.docker_volume:
#     volume_name: "{{ volume.vname }}"
#     state: present
#     recreate: never
#     driver: local
#     driver_options:
#       size: "{{ volume.size }}"
#   loop:
#     - vname: "Movies"
#       size: 300G

#     - vname: "TV"
#       size: 300G

#     - vname: "Downloads"
#       size: 50G
#   loop_control:
#     loop_var: volume


# https://github.com/qdm12/gluetun/wiki
- name: Create Gluetun
  become_user: "{{ ansible_user }}"
  community.docker.docker_compose:
    project_name: "Gluetun"
    definition:
      services:
        gluetun:
          image: qmcgaw/gluetun
          restart: unless-stopped
          container_name: "{{ container_name }}"
          cap_add:
            - NET_ADMIN
          environment:
            - VPN_SERVICE_PROVIDER={{ vpn_service_provider }}
            - VPN_TYPE=wireguard
            - WIREGUARD_PRIVATE_KEY={{ wireguard_private_key }}
            - WIREGUARD_ADDRESSES={{ wireguard_address }}
            - SERVER_CITIES=New York NY
            - DOT_PROVIDERS=quad9
            - UPDATER_PERIOD=48h
          ports:
            - "7676:6767" # Bazarr
            - "9898:8989" # Sonar
            - "8787:7878" # Raddarr
            - "9845:9117" # Jackett
            # Qbittorent
            - "9078:9078"
            - "7439:6881/tcp"
            - "7439:6881/udp"
          volumes:
            - "{{ gluetun_config_path }}:/gluetun"

- name: Create Sonnar
  become_user: "{{ ansible_user }}"
  community.docker.docker_compose:
    project_name: "Sonnarr"
    definition:
      services:
        # Request shows automatically, https://hub.docker.com/r/linuxserver/sonarr
        sonar:
          image: linuxserver/sonarr
          restart: unless-stopped
          network_mode: "{{ unified_network }}"
          container_name: sonnar
          environment:
            - TZ={{ time_zone }}
            - PUID="{{ users[0].PUID }}"
            - PGID={{ group_return_values.gid }}
            - UMASK={{ media_UMASK }}
          volumes:
            - "{{ sonarr_config_path }}:/config"
            - "{{ media_path_tv }}:{{ internal_tv }}"
            - "{{ media_path_downloads }}:{{ internal_downloads }}"

- name: Create Raddarr
  become_user: "{{ ansible_user }}"
  community.docker.docker_compose:
    project_name: "raddar"
    definition:
      services:
        # Request movies automatically, https://hub.docker.com/r/linuxserver/radarr
        raddarr:
          image: linuxserver/radarr
          restart: unless-stopped
          container_name: radarr
          environment:
            - TZ={{ time_zone }}
            - PUID="{{ users[0].PUID }}"
            - PGID={{ group_return_values.gid }}
            - UMASK={{ media_UMASK }}
          network_mode: "{{ unified_network }}"
          volumes:
            - "{{ radarr_config_path }}:/config"
            - "{{ media_path_movies }}:{{ internal_movies }}"
            - "{{ media_path_downloads }}:{{ internal_downloads }}"


- name: Create Bazarr
  become_user: "{{ ansible_user }}"
  community.docker.docker_compose:
    project_name: "bazarr"
    definition:
      # Get subtitles
      services:
        bazarr:
          image: linuxserver/bazarr
          restart: unless-stopped
          container_name: bazarr
          environment:
            - TZ={{ time_zone }}
            - PUID="{{ users[0].PUID }}"
            - PGID={{ group_return_values.gid }}
            - UMASK={{ media_UMASK }}
          network_mode: "{{ unified_network }}"
          volumes:
            - "{{ bazarr_config_path }}:/config"
            - "{{ media_path_tv }}:{{ internal_tv }}"
            - "{{ media_path_movies }}:{{ internal_movies }}"


- name: Create Jackett
  become_user: "{{ ansible_user }}"
  community.docker.docker_compose:
    project_name: "jacket"
    definition:
      services:
        # Create Jackett, helps parse stuff of interest
        jackett:
          image: linuxserver/jackett
          restart: unless-stopped
          container_name: jackett
          environment:
            - TZ={{ time_zone }}
            - PUID="{{ users[0].PUID }}"
            - PGID={{ group_return_values.gid }}
            - UMASK={{ media_UMASK }}
          network_mode: "{{ unified_network }}"
          volumes:
            - "{{ jackett_config_path }}:/config"

- name: Create Qbittorent
  become_user: "{{ ansible_user }}"
  community.docker.docker_compose:
    project_name: "qbittorent"
    definition:
      services:
        # Actually does the downloading, https://hub.docker.com/r/linuxserver/qbittorrent
        qbittorent:
          image: linuxserver/qbittorrent
          restart: unless-stopped
          container_name: qbittorrent
          environment:
            - TZ={{ time_zone }}
            - WEBUI_PORT=9078
            - PUID="{{ users[1].PUID }}"
            - PGID={{ group_return_values.gid }}
            - UMASK={{ media_UMASK }}
          network_mode: "{{ unified_network }}"
          volumes:
            - "{{ qbit_config_path }}:/config"
            - "{{ media_path_downloads }}:{{ internal_downloads }}"


- name: Create jellyfin media
  become_user: "{{ ansible_user }}"
  community.docker.docker_compose:
    project_name: Jellyfin
    definition:
      services:
        jellyfin:
          image: linuxserver/jellyfin
          restart: unless-stopped
          container_name: jellyfin
          environment:
            - TZ={{ time_zone }}
            - PUID="{{ users[0].PUID }}"
            - PGID={{ group_return_values.gid }}
            - UMASK={{ media_UMASK }}
          ports:
            - "7260:8096"
          volumes:
            - "{{ jellyfin_config_path }}:/config"
            - "{{ media_path_tv }}:{{ internal_tv }}"
            - "{{ media_path_movies }}:{{ internal_movies }}"

# - name: Create Open books
#   community.docker.docker_container:
#     name: Open Books
